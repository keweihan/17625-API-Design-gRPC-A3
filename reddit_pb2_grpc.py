# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reddit_pb2 as reddit__pb2


class GreeterStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePost = channel.unary_unary(
                '/reddit.Greeter/CreatePost',
                request_serializer=reddit__pb2.CreatePostRequest.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.DownvotePost = channel.unary_unary(
                '/reddit.Greeter/DownvotePost',
                request_serializer=reddit__pb2.PostID.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.UpvotePost = channel.unary_unary(
                '/reddit.Greeter/UpvotePost',
                request_serializer=reddit__pb2.PostID.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.RetrievePost = channel.unary_unary(
                '/reddit.Greeter/RetrievePost',
                request_serializer=reddit__pb2.PostID.SerializeToString,
                response_deserializer=reddit__pb2.Post.FromString,
                )
        self.CreateComment = channel.unary_unary(
                '/reddit.Greeter/CreateComment',
                request_serializer=reddit__pb2.CreateCommentRequest.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.UpvoteComment = channel.unary_unary(
                '/reddit.Greeter/UpvoteComment',
                request_serializer=reddit__pb2.CommentID.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.DownvoteComment = channel.unary_unary(
                '/reddit.Greeter/DownvoteComment',
                request_serializer=reddit__pb2.CommentID.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )
        self.ExpandComment = channel.unary_stream(
                '/reddit.Greeter/ExpandComment',
                request_serializer=reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
                response_deserializer=reddit__pb2.Comment.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    """

    def CreatePost(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvotePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrievePost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownvoteComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExpandComment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePost': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePost,
                    request_deserializer=reddit__pb2.CreatePostRequest.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'DownvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvotePost,
                    request_deserializer=reddit__pb2.PostID.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'UpvotePost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvotePost,
                    request_deserializer=reddit__pb2.PostID.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'RetrievePost': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrievePost,
                    request_deserializer=reddit__pb2.PostID.FromString,
                    response_serializer=reddit__pb2.Post.SerializeToString,
            ),
            'CreateComment': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateComment,
                    request_deserializer=reddit__pb2.CreateCommentRequest.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'UpvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpvoteComment,
                    request_deserializer=reddit__pb2.CommentID.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'DownvoteComment': grpc.unary_unary_rpc_method_handler(
                    servicer.DownvoteComment,
                    request_deserializer=reddit__pb2.CommentID.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
            'ExpandComment': grpc.unary_stream_rpc_method_handler(
                    servicer.ExpandComment,
                    request_deserializer=reddit__pb2.ExpandCommentBranchRequest.FromString,
                    response_serializer=reddit__pb2.Comment.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reddit.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    """

    @staticmethod
    def CreatePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/CreatePost',
            reddit__pb2.CreatePostRequest.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/DownvotePost',
            reddit__pb2.PostID.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvotePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/UpvotePost',
            reddit__pb2.PostID.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrievePost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/RetrievePost',
            reddit__pb2.PostID.SerializeToString,
            reddit__pb2.Post.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/CreateComment',
            reddit__pb2.CreateCommentRequest.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/UpvoteComment',
            reddit__pb2.CommentID.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownvoteComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reddit.Greeter/DownvoteComment',
            reddit__pb2.CommentID.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExpandComment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/reddit.Greeter/ExpandComment',
            reddit__pb2.ExpandCommentBranchRequest.SerializeToString,
            reddit__pb2.Comment.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
