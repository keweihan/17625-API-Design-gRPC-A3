syntax = "proto3";

package reddit;

// Reddit service definition.
service Reddit {
    // Creates a post object
    rpc CreatePost (CreatePostRequest) returns (Post) {}

    // Downvotes a post given postID
    rpc DownvotePost (PostID) returns (Post) {}

    // Upvotes a post given postID
    rpc UpvotePost (PostID) returns (Post) {}

    // Retrieves post given postID
    rpc RetrievePost (PostID) returns (Post) {}

    // create comment based on comment request
    rpc CreateComment (CreateCommentRequest) returns (Comment) {}

    // upvote comment
    rpc UpvoteComment (CommentID) returns (Comment) {}

    // downvote comment
    rpc DownvoteComment (CommentID) returns (Comment) {}

    // expand comment (depth=2)
    rpc ExpandComment (ExpandCommentBranchRequest) returns (stream Comment) {}

    // retrieve comments of post
    rpc RetrieveComments (RetrieveCommentRequest) returns (stream Comment) {}

    //rpc MonitorUpdate (stream ) 
}

// --------------- Data Model ---------------// 
// User
message User {
  string user_id = 1;
}

// Post
message PostID {
    string id = 1;
}

enum PostState {
    NORMAL_POST = 0;
    LOCKED_POST = 1;
    HIDDEN_POST = 2;
}

message Post {
    PostID id = 10;
    string title = 1;
    string text = 2;
    oneof url {
        string video = 3;
        string img = 4;
    }
    optional string author = 5;
    int32 score = 6;
    PostState state = 7;
    string pub_date = 8;
    Subreddit subreddit = 9;
}

message CreatePostRequest {
    string title = 1;
    string text = 2;
    oneof url {
        string video = 3;
        string img = 4;
    }
    optional string author = 5;
    Subreddit subreddit = 9;
}

// Comment
message CommentID {
    string id = 1;
}

enum CommentState {
    NORMAL_COMMENT = 0;
    HIDDEN_COMMENT = 1;
}

message Comment {
    CommentID id = 9;
    string text = 11;
    string author = 10;
    int32 score = 1;
    CommentState state = 2;
    string pub_date = 3;
    oneof parent {
        PostID parent_post_id = 4;
        CommentID parent_comment_id = 5;
    }
    bool hasReplies = 6;
}

message CreateCommentRequest {
    string author = 5;
    string text = 6;
    CommentState state = 2;
    oneof parent {
        PostID parent_post_id = 3;
        CommentID parent_comment_id = 4;
    }
}

message MostUpvotedCommentRequest {
    PostID post = 1;
    int32 number = 2;
}

message ExpandCommentBranchRequest {
    CommentID comment = 1;
    int32 number = 2;
}

message RetrieveCommentRequest {
    PostID post = 1;
    int32 number = 2;
}

// Subreddit
enum SubredditState {
    PUBLIC_SUBREDDIT = 0;
    PRIVATE_SUBREDDIT = 1;
    HIDDEN_SUBREDDIT = 2;
}

message Subreddit {
    string name = 4;
    SubredditState state = 1;
    string pub_date = 2;
    repeated string tags = 3;
}